plugins {
   id 'java'
   id 'project-report'
   id "org.xbib.gradle.plugin.git" version "2.0.0"
   
}
jar {  
	//baseName="Refactoring"
    manifest {  
        attributes(  
   
                'Main-Class': 'edu.odu.cs.cs350.Refactoring'
                )
    }  
}  

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    
}

test {
    ignoreFailures = true
    useJUnitPlatform()
}

task reports (dependsOn: ['javadoc', 'test']) {
    description 'Generate all reports for this project'
}



task clonePages() {
    doLast {
        mkdir 'build/dup-pages'
        def thisRepo = "$buildDir/../.."
        def pagesDir = "$buildDir/dup-pages"
            project.delete {
            delete pagesDir
        }

         def grgit = git.clone {
            dir = pagesDir
            uri = thisRepo
            bare = false
            refToCheckout = 'dup-pages'
            
        }
        grgit.checkout {
            branch = 'dup-pages'
        }
        grgit.close()

    }
}

task copyReport(dependsOn: ['reports','clonePages']) {  
   doLast {


	ant.copy(  todir: "${buildDir}/dup-pages"){
		   fileset(dir: "${buildDir}/docs")}
         ant.copy( todir: "${buildDir}/dup-pages"){
         	   fileset(dir: "${buildDir}/reports")}
		     

                 }
}

task deployReports (dependsOn:'copyReport') {
    group = "Reporting"
    description  'Copies reports to the dup-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "$buildDir/dup-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
            
        }
        grgit.add (update: false, patterns: ['javadoc/'])
        grgit.add (update: true, patterns: ['javadoc/'])
         grgit.add (update: false, patterns: ['tests/'])
        grgit.add (update: true, patterns: ['tests/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
        exec {
            workingDir = '.'
            commandLine = ['git', 'push','--all']
        }
        grgit.close()
    }
}