buildscript {
	dependencies {
		classpath "com.github.fracpete:rsync4j-all:3.1.2-15"
	}
}
plugins {
   id 'java'
   id 'project-report'
   id "org.xbib.gradle.plugin.git" version "2.0.0"
   id "org.xbib.gradle.plugin.jflex" version "1.5.0"
   //id 'pmd' // and/or checkstyle, jacoco, spotbugs
 // id 'checkstyle'
  //id 'jacoco'
  id 'edu.odu.cs.report_accumulator' version '1.4' 
   
   
}

jar {  
	//baseName="Refactoring"
    manifest {  
        attributes(  
   
                'Main-Class': 'edu.odu.cs.cs350.Refactoring'
                )
    }  
}  

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    jcenter()
    ivy{
    	url 'https://www.cs.odu.edu/~zeil/ivyrepo'
    	}
}

sourceSets {
  main {
     jflex {
       srcDir "src/main/jflex"
     }
     java {
       srcDir "$buildDir/my-generated-sources/jflex"
     }
  }
}



dependencies {
	implementation 'net.sf.saxon:saxon-dom:8.7+'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    
}

test {
    ignoreFailures = true
    useJUnitPlatform()
}
//for the sake of academic honesty this is from my gitlab website code-AR
task reports (dependsOn: ['javadoc', 'test']) {
    description 'Generate all reports for this project'
}
/*checkstyle {
        configFile = new File(rootDir, "config/checkstyle.xml")
        ignoreFailures = true
        sourceSets = [sourceSets.main]
   }


   pmd {
        ruleSets = ["basic", "braces", "design"]
        ignoreFailures = true
        sourceSets = [sourceSets.main]
   }*/
reportStats {
    reportsURL = 'https://arobe022.github.io/CS350DupDetector/javadoc'
    htmlSourceDir = file('src/main/html')  // default value
    reportsDir = file('build/reports') // default value
                 // defaults to current date, but can be any run identifier
}
 task report (type: Copy, dependsOn: ':report_accumulator:reports') {
	from '../report_accumulator/build/reports'
	into 'build/reports'
}





import com.github.fracpete.rsync4j.RSync;
import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput;

task deployWebsite (dependsOn: "reportStats") {
	group = 'reporting'
	description = 'Upload the website (with all reports)'
    doLast {
        def sourceDir = "build/reports/";
        def destURL = "https://arobe022.github.io/CS350DupDetector";
        RSync rsync = new RSync()
                .source(sourceDir)
                .destination(destURL)
                .recursive(true)
                .archive(true)
                .delete(true)
                .verbose(true);
                //.rsh("ssh -o IdentitiesOnly=yes");
        ConsoleOutputProcessOutput output =
                new ConsoleOutputProcessOutput();
        output.monitor(rsync.builder());
    }
}

task clonePages() {
    doLast {
        mkdir 'build/dup-pages'
        def thisRepo = "$buildDir/../.."
        def pagesDir = "$buildDir/dup-pages"
            project.delete {
            delete pagesDir
        }

         def grgit = git.clone {
            dir = pagesDir
            uri = thisRepo
            bare = false
            refToCheckout = 'dup-pages'
            
        }
        grgit.checkout {
            branch = 'dup-pages'
        }
        grgit.close()

    }
}

task copyReport(dependsOn: ['reports','clonePages']) {  
   doLast {


	ant.copy(  todir: "${buildDir}/dup-pages"){
		   fileset(dir: "${buildDir}/docs")}
         ant.copy( todir: "${buildDir}/dup-pages"){
         	   fileset(dir: "${buildDir}/reports")}
		     

                 }
}

task deployReports (dependsOn:'copyReport') {
    group = "Reporting"
    description  'Copies reports to the dup-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "$buildDir/dup-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
            
        }
        grgit.add (update: false, patterns: ['javadoc/'])
        grgit.add (update: true, patterns: ['javadoc/'])
         grgit.add (update: false, patterns: ['tests/'])
        grgit.add (update: true, patterns: ['tests/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
        exec {
            workingDir = '.'
            commandLine = ['git', 'push','--all']
        }
        grgit.close()
    }
}